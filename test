#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright (C) 2019 The TimeBags developers
#
# This file is part of the TimeBags software.
#
# It is subject to the license terms in the LICENSE file-
# found in the top-level directory of this distribution.
#
# No part of the Timebags software, including this file, may be copied,
# modified, propagated, or distributed except according to the terms-
# contained in the LICENSE file.

'''
This file belong to [TimeBags Project](https://timebags.org)
'''

from glob import glob
import os
import tempfile
import unittest
import shutil

import asic
from cli import there_can_be_only_one

class TestAsic(unittest.TestCase):
    ''' Test Asic module '''


    def test_asics_notvalid(self):
        ''' Test asic-s NOT valid files '''

        print("\nTesting: asic-s NOT valid files asics_notvalid_*.zip")
        for filename in sorted(glob(os.path.join("tests", "asics", "asics_notvalid_*.zip"))):
            container = asic.ASiCS(filename)
            print(filename)
            print("- valid: %s" % str(container.valid))
            print("- status: %s" % container.status)
            self.assertFalse(container.valid)


    def test_asics_valid(self):
        ''' Test asic-s valid files '''

        print("\nTesting asic-s valid files asics_valid_*.zip")
        for filename in sorted(glob(os.path.join("tests", "asics", "asics_valid_*.zip"))):
            container = asic.ASiCS(filename)
            print(filename)
            print("- valid: %s" % str(container.valid))
            print("- status: %s" % container.status)
            self.assertTrue(container.valid)
            with tempfile.TemporaryDirectory() as tmpdir:
                filename_copy = os.path.join(tmpdir, os.path.basename(filename))
                print("- copy: %s" % filename_copy)
                shutil.copyfile(filename, filename_copy)
                container = asic.ASiCS(filename_copy)
                if os.path.basename(filename_copy) == "asics_valid_emptydata.zip":
                    self.assertFalse(container.complete())
                    print("- not completed file: %s" % filename_copy)
                else:
                    self.assertTrue(container.complete())
                    print("- completed file: %s" % filename_copy)


class TestMain(unittest.TestCase):
    ''' Test Main module '''

    def test_m1_tcboo_one(self):
        ''' Test a regular file as single param '''

        name = "Readme.md"
        print("\nTesting: regular file (%s) as single param" % name)
        self.assertTrue(os.path.exists(name))
        file_result = there_can_be_only_one([name])
        print("Result of there_can_be_only_one(): %s" % file_result)
        self.assertTrue(os.path.exists(file_result))
        # check if the result is a valid asic-s
        container = asic.ASiCS(file_result)
        self.assertTrue(container.valid)
        print("container.dataobject = %s" % container.dataobject)
        self.assertTrue(container.dataobject == name)
        # cleaning
        os.remove(file_result)

    def test__m2_tcboo_none(self):
        ''' Test a non-existent file as single param '''

        name = next(tempfile._get_candidate_names())
        print("\nTesting: non-existent file %s as single param" % name)
        self.assertFalse(os.path.exists(name))
        file_result = there_can_be_only_one([name])
        print("Result of there_can_be_only_one(): %s" % file_result)
        self.assertTrue(file_result is None)

    def test_m3_tcboo_dir(self):
        ''' Test a dir (not a regular file) as single param '''

        name = os.path.join("tests", "example_dir")
        print("\nTesting: dir %s as single param" % name)
        self.assertTrue(os.path.isdir(name))
        file_result = there_can_be_only_one([name])
        print("Result of there_can_be_only_one(): %s" % file_result)
        self.assertTrue(os.path.exists(file_result))
        # check if the result is a valid asic-s
        container = asic.ASiCS(file_result)
        self.assertTrue(container.valid)
        # cleaning
        os.remove(file_result)

    def test_m4_tcboo_files(self):
        ''' Test a list of files as param '''

        names = glob(os.path.join("*.py"))
        print("\nTesting: list of files (%s) as param" % names)
        self.assertFalse(len(names) < 2)
        file_result = there_can_be_only_one(names)
        print("Result of there_can_be_only_one(): %s" % file_result)
        self.assertTrue(os.path.exists(file_result))
        # check if the result is a valid asic-s
        container = asic.ASiCS(file_result)
        self.assertTrue(container.valid)
        # cleaning
        os.remove(file_result)

    def test_m5_tcboo_one_empty(self):
        ''' Test one empty file as param '''

        name = os.path.join("tests", "empty", "data1")
        print("\nTesting: empty file %s as param" % name)
        self.assertTrue(os.path.isfile(name))
        self.assertFalse(there_can_be_only_one([name]))

    def test_m6_tcboo_two_empty(self):
        ''' Test two empty files as param '''

        names = glob(os.path.join("tests", "empty", "data*"))
        print("\nTesting: empty files (%s) as params" % names)
        self.assertFalse(len(names) != 2)
        for name in names:
            self.assertTrue(os.path.isfile(name))
        self.assertFalse(there_can_be_only_one(names))

    def test_m7_tcboo_dir_of_empty(self):
        ''' Test a dir of empty files as param '''

        name = os.path.join("tests", "empty")
        print("\nTesting: dir of empty files (%s) as param" % name)
        self.assertTrue(os.path.isdir(name))
        self.assertFalse(there_can_be_only_one([name]))


    def test_m8_tcboo_one_special(self):
        ''' Test one special file as param '''

        name = os.path.join(os.sep, "dev", "tty")
        print("\nTesting: special file %s as param" % name)
        self.assertTrue(os.path.exists(name))
        self.assertFalse(os.path.isfile(name))
        self.assertFalse(there_can_be_only_one([name]))

    def test_m9_tcboo_two_special(self):
        ''' Test many special files as param '''

        names = glob(os.path.join(os.sep, "dev", "tty?1"))
        print("\nTesting: special files (%s) as params" % names)
        self.assertFalse(len(names) < 2)
        for name in names:
            self.assertTrue(os.path.exists(name))
            self.assertFalse(os.path.isfile(name))
        self.assertFalse(there_can_be_only_one(names))

    def test_m10_tcboo_dir_of_special(self):
        ''' Test a dir of special files as param '''

        name = os.path.join(os.sep, "dev")
        print("\nTesting: dir of special files (%s) as param" % name)
        self.assertTrue(os.path.isdir(name))
        self.assertFalse(there_can_be_only_one([name]))

    def test_m11_tcboo_permitted(self):
        ''' Test not permitted files '''

        name = os.path.join(os.sep, "proc", "1")
        print("\nTesting: not permitted files (%s) as param" % name)
        self.assertTrue(os.path.isdir(name))
        self.assertFalse(there_can_be_only_one([name]))



if __name__ == '__main__':
    unittest.main()
