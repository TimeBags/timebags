#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright (C) 2019 The TimeBags developers
#
# This file is part of the TimeBags software.
#
# It is subject to the license terms in the LICENSE file-
# found in the top-level directory of this distribution.
#
# No part of the Timebags software, including this file, may be copied,
# modified, propagated, or distributed except according to the terms-
# contained in the LICENSE file.

'''
This file belong to [TimeBags Project](https://timebags.org)
'''

from glob import glob
import os
import tempfile
import unittest
import shutil
import logging

import settings
import asic
import cli



class TestMain(unittest.TestCase):
    ''' Test non-asic input '''

    def test_m1_main_one(self):
        ''' Test a regular file as single param '''

        name = "tsa.yaml"
        msg = "##### Testing m1: regular file(%s) as single param"
        self.assertTrue(os.path.exists(name))
        ret = cli.main([name])
        msg = "Ret of cli.main(): %s" % repr(ret)
        logging.info(msg)
        self.assertTrue(os.path.exists(ret['pathfile']))
        self.assertTrue(ret['result'] == 'PENDING')
        # cleaning
        os.remove(ret['pathfile'])

    def test__m2_main_none(self):
        ''' Test a non-existent file as single param '''

        name = next(tempfile._get_candidate_names()) # pylint: disable=W0212
        msg = "##### Testing m2: non-existent file(%s) as single param" % name
        logging.info(msg)
        self.assertFalse(os.path.exists(name))
        ret = cli.main([name])
        msg = "Ret of cli.main(): %s" % repr(ret)
        logging.info(msg)
        self.assertTrue(ret is None)

    def test_m3_main_dir(self):
        ''' Test a dir (not a regular file) as single param '''

        name = os.path.join("tests", "example_dir")
        msg = "##### Testing m3: dir(%s) as single param" % name
        logging.info(msg)
        self.assertTrue(os.path.isdir(name))
        ret = cli.main([name])
        msg = "Ret of cli.main(): %s" % repr(ret)
        logging.info(msg)
        self.assertTrue(os.path.exists(ret['pathfile']))
        self.assertTrue(ret['result'] == 'PENDING')
        # cleaning
        os.remove(ret['pathfile'])

    def test_m4_main_files(self):
        ''' Test a list of files as param '''

        names = glob(os.path.join("*.py"))
        msg = "##### Testing m4: list of files(%s) as param" % names
        logging.info(msg)
        self.assertFalse(len(names) < 2)
        ret = cli.main(names)
        msg = "Ret of cli.main(): %s" % repr(ret)
        logging.info(msg)
        self.assertTrue(os.path.exists(ret['pathfile']))
        self.assertTrue(ret['result'] == 'PENDING')
        # cleaning
        os.remove(ret['pathfile'])

    def test_m5_main_one_empty(self):
        ''' Test one empty file as param '''

        name = os.path.join("tests", "empty", "data1")
        msg = "##### Testing m5: empty file(%s) as param" % name
        logging.info(msg)
        self.assertTrue(os.path.isfile(name))
        self.assertTrue(cli.main([name]) is None)

    def test_m6_main_two_empty(self):
        ''' Test two empty files as param '''

        names = glob(os.path.join("tests", "empty", "data*"))
        msg = "##### Testing m6: empty files(%s) as params" % names
        logging.info(msg)
        self.assertFalse(len(names) < 2)
        for name in names:
            self.assertTrue(os.path.isfile(name))
        ret = cli.main(names)
        msg = "Ret of cli.main(): %s" % repr(ret)
        logging.info(msg)
        self.assertTrue(os.path.exists(ret['pathfile']))
        self.assertTrue(ret['result'] == 'PENDING')
        # cleaning
        os.remove(ret['pathfile'])

    def test_m7_main_dir_of_empty(self):
        ''' Test a dir of empty files as param '''

        name = os.path.join("tests", "empty")
        msg = "##### Testing m7: dir of empty files(%s) as param" % name
        logging.info(msg)
        self.assertTrue(os.path.isdir(name))
        ret = cli.main([name])
        msg = "Ret of cli.main(): %s" % repr(ret)
        logging.info(msg)
        self.assertTrue(os.path.exists(ret['pathfile']))
        self.assertTrue(ret['result'] == 'PENDING')
        # cleaning
        os.remove(ret['pathfile'])

    def test_m8_main_one_special(self):
        ''' Test one special file as param '''

        name = os.path.join(os.sep, "dev", "tty")
        msg = "##### Testing m8: special file(%s) as param" % name
        logging.info(msg)
        self.assertTrue(os.path.exists(name))
        self.assertFalse(os.path.isfile(name))
        self.assertTrue(cli.main([name]) is None)

    def test_m9_main_two_special(self):
        ''' Test many special files as param '''

        names = glob(os.path.join(os.sep, "dev", "tty?1"))
        msg = "##### Testing m9: special files(%s) as params" % names
        logging.info(msg)
        self.assertFalse(len(names) < 2)
        for name in names:
            self.assertTrue(os.path.exists(name))
            self.assertFalse(os.path.isfile(name))
        self.assertTrue(cli.main(names) is None)

    def test_m10_main_dir_of_special(self):
        ''' Test a dir of special files as param '''

        name = os.path.join(os.sep, "dev")
        msg = "##### Testing m10: dir of special files(%s) as param" % name
        logging.info(msg)
        self.assertTrue(os.path.isdir(name))
        self.assertTrue(cli.main([name]) is None)

    def test_m11_main_permitted(self):
        ''' Test not permitted files '''

        name = os.path.join(os.sep, "proc", "1")
        msg = "##### Testing m11: not permitted files(%s) as param" % name
        logging.info(msg)
        self.assertTrue(os.path.isdir(name))
        self.assertTrue(cli.main([name]) is None)


class TestAsic(unittest.TestCase):
    ''' Test Asic files as input '''


    def test_asics_notvalid(self):
        ''' Test asic-s NOT valid files '''

        logging.info("##### Testing: asic-s NOT valid files asics_notvalid_*.zip")
        for filename in sorted(glob(os.path.join("tests", "asics", "asics_notvalid_*.zip"))):
            container = asic.ASiCS(filename)
            msg = "##### Testing: file(%s) valid(%s) status(%s)" % \
                    (filename, str(container.valid), container.status['asic-s'])
            logging.info(msg)
            self.assertFalse(container.valid)


    def test_asics_valid(self):
        ''' Test asic-s valid files '''

        logging.info("##### Testing asic-s valid files asics_valid_*.zip")
        for filename in sorted(glob(os.path.join("tests", "asics", "asics_valid_*.zip"))):
            container = asic.ASiCS(filename)
            msg = "##### Testing file(%s) valid(%s) status(%s)" % \
                    (filename, str(container.valid), container.status['asic-s'])
            logging.info(msg)
            self.assertTrue(container.valid)
            with tempfile.TemporaryDirectory() as tmpdir:
                filename_copy = os.path.join(tmpdir, os.path.basename(filename))
                shutil.copyfile(filename, filename_copy)
                container = asic.ASiCS(filename_copy)
                msg = "to be completed file: %s" % filename_copy
                logging.info(msg)
                ret = container.process_timestamps()
                if "complete" in filename:
                    self.assertTrue(ret == 'UPGRADED')
                else:
                    self.assertTrue(ret == 'PENDING')


    def test_asics_corrupted(self):
        ''' Test asic-s corrupted files '''

        logging.info("##### Testing asic-s corrupted files asics_corrupted_*.zip")
        for filename in sorted(glob(os.path.join("tests", "asics", "asics_corrupted_*.zip"))):
            container = asic.ASiCS(filename)
            msg = "##### Testing file(%s) corrupted(%s) status(%s)" % \
                    (filename, str(container.valid), container.status['asic-s'])
            logging.info(msg)
            self.assertTrue(container.valid)
            with tempfile.TemporaryDirectory() as tmpdir:
                filename_copy = os.path.join(tmpdir, os.path.basename(filename))
                shutil.copyfile(filename, filename_copy)
                container = asic.ASiCS(filename_copy)
                msg = "to be verifyed file: %s" % filename_copy
                logging.info(msg)
                ret = container.process_timestamps()
                self.assertTrue(ret == 'CORRUPTED')




if __name__ == '__main__':

    settings.init()
    #logfile = os.path.join("tests","test.log")
    #logging.basicConfig(filename=logfile, filemode='w', level=logging.DEBUG)
    logging.basicConfig(level=logging.DEBUG)
    unittest.main()
